name: scientific
version: 0.3.3.1
id: scientific-0.3.3.1-ecc8aa78f4f19a431e3990b909e9dc7d
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides a space efficient and arbitrary precision
             scientific number type.
             .
             'Scientific' numbers are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
             uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
             note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision). A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
trusted: False
import-dirs: /Users/Erwan/projects/haskell/CouchUtils/.cabal-sandbox/lib/x86_64-osx-ghc-7.6.3/scientific-0.3.3.1
library-dirs: /Users/Erwan/projects/haskell/CouchUtils/.cabal-sandbox/lib/x86_64-osx-ghc-7.6.3/scientific-0.3.3.1
hs-libraries: HSscientific-0.3.3.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3
         base-4.6.0.1-6c351d70a24d3e96f315cba68f3acf57
         bytestring-0.10.4.0-ed2cdaee92d93aa8dd61a235896c69e3
         deepseq-1.3.0.1-5cc4cd89bdc2e8f6db1833d95ec36926
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.2.0-ebe651d361e8e0edc237106a85da3811
         integer-gmp-0.5.0.0-2f15426f5b53fe4c6490832f9b20d8d7
         text-0.11.3.1-4ce224afed3e48ae93305d693147738b
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /Users/Erwan/projects/haskell/CouchUtils/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.6.3/scientific-0.3.3.1/html/scientific.haddock
haddock-html: /Users/Erwan/projects/haskell/CouchUtils/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.6.3/scientific-0.3.3.1/html
